{"version":3,"sources":["utils.ts","mod-builder.ts","components/DownloadButton.tsx","components/Error.tsx","components/Input.tsx","components/About.tsx","components/FetchButton.tsx","components/TexturePreview.tsx","components/UploadButton.tsx","components/Switch.tsx","components/TextureSize.tsx","components/Texture.tsx","data/defaults.ts","data/defs.ts","data/enums.ts","components/CostList.tsx","components/StatList.tsx","components/StringList.tsx","components/StringWithDefaults.tsx","components/FloorSettings.tsx","components/FloorBasics.tsx","components/Floor.tsx","components/TabManager.tsx","StuffedFloorModGenerator.tsx","index.tsx"],"names":["alphanumericRegex","sanitizeString","str","replace","elementSize","element","computedStyle","getComputedStyle","width","clientWidth","height","clientHeight","parseFloat","paddingTop","paddingBottom","paddingLeft","paddingRight","unwrapErrors","object","schema","validateSync","abortEarly","err","ValidationError","errors","inner","error","set","path","message","errorArray","errorObject","msgs","key","Object","prototype","hasOwnProperty","call","el","push","Array","isArray","forEach","e","isObject","aboutTemplate","handlebars","compile","floorDefTemplate","RenderAbout","about","validationErrors","packageId","RenderFloors","floors","BuildMod","a","zip","jszip","modFolder","name","aboutXml","file","floorXml","floor","texture","out","defName","generateAsync","type","DownloadButton","observer","id","className","classNames","button","this","building","onClick","download","Component","observable","action","props","some","isEmpty","submitting","console","log","map","truthy","archive","saveAs","Error","touched","get","Input","label","small","inputProps","Element","React","cloneElement","onBlur","htmlFor","About","author","AboutSchema","computed","yup","required","description","url","AboutComponent","value","onChange","target","FetchButton","inputRef","createRef","style","marginTop","ref","onSubmit","input","current","fetch","result","blob","setTexture","TexturePreview","canvasRef","componentDidUpdate","canvas","mirror","settings","availableSize","parentElement","createImageBitmap","textureData","ctx","getContext","Math","min","scale","sw","sh","drawImage","grid","setLineDash","x","moveTo","lineTo","y","strokeStyle","stroke","data-rendering","rendering","data-revision","revision","UploadButton","accept","loadTexture","PureComponent","event","files","length","Switch","checked","rounded","outlined","switch","TextureSize","toggleSetting","updateSetting","raw","size","tile","tilesX","tilesY","stretch","alignItems","ev","parseInt","TextureSchema","shape","when","is","then","test","Texture","setRawSize","image","setTiles","renderCanvas","document","createElement","updateTextureDebounced","debounce","updateTexture","trailing","leading","maxWait","contrast","brightness","desaturate","autorun","rawData","filter","dest","toBlob","setting","TextureComponent","index","step","max","simpleMode_materials","simpleMode_stuffCategories","Stone","Wood","Metal","Cloth","simpleMode_type","simpleMode_stuffCost","Basic","Pretty","Royal","simpleMode_tags","simpleMode_researchPrerequisites","simpleMode_burnedTerrain","simpleMode_stats","def","stuffCategories","affordances","tags","researchDefs","burnedFloorDefs","edgeTypes","CostList","costs","defCount","cost","onDelete","delete","add","msg","Set","costCount","removing","findIndex","splice","Cost","placeholder","toString","blank","StatList","stats","stat","statCount","Stat","valueTemp","updateValue","applyValue","StringList","selected","isMulti","handleChange","options","cat","classNamePrefix","uniq","o","_value","meta","clear","option","newOptions","v","indexOf","removedValue","StringWithDefaults","selectedOption","opts","noneOption","updateSelected","FloorSettings","detailed","simple","setMaterial","setType","toggleDetailed","material","resetFloor","FloorSettings_Detail","stuffcost","researchPrerequisites","burnedDef","defaultValue","edgeType","_option","edge","terrainAffordanceNeeded","FloorSettings_Simple","mat","FloorBasics","DefSchema","trim","matches","CostSchema","moreThan","StatSchema","FloorSchema","of","stuffCost","integer","positive","Floor","floorCount","array","FloorComponent","random","TabManager","tab","onTabChange","removeFloor","addFloor","FloorStore","find","f","remove","DeleteX","viewBox","aria-hidden","focusable","d","box","StuffedFloorModGenerator","changeTab","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.02279d81.chunk.js","sourcesContent":["import { isObject } from \"lodash\";\r\nimport set from \"lodash/set\";\r\nimport { Schema, ValidationError } from \"yup\";\r\n\r\nconst alphanumericRegex = /[^a-z0-9_]+/gi;\r\nexport const sanitizeString = (str: string): string => {\r\n    return str.replace(alphanumericRegex, \"\");\r\n};\r\n\r\n// https://stackoverflow.com/a/56531945\r\nexport const elementSize = (element: HTMLElement) => {\r\n    var computedStyle = getComputedStyle(element);\r\n\r\n    let width = element.clientWidth; // width with padding\r\n    let height = element.clientHeight; // height with padding\r\n\r\n    height -=\r\n        parseFloat(computedStyle.paddingTop) +\r\n        parseFloat(computedStyle.paddingBottom);\r\n    width -=\r\n        parseFloat(computedStyle.paddingLeft) +\r\n        parseFloat(computedStyle.paddingRight);\r\n    return { height, width };\r\n};\r\n\r\nexport type ValidationErrors<T> = {\r\n    [K in keyof Partial<T>]: T[K] extends any[]\r\n        ? ValidationErrors<T[K][number]>[]\r\n        : string;\r\n};\r\n\r\nexport function unwrapErrors<T>(\r\n    object: T,\r\n    schema: Schema<any, T>\r\n): ValidationErrors<T> {\r\n    try {\r\n        schema.validateSync(object, { abortEarly: false });\r\n    } catch (err) {\r\n        if (err instanceof ValidationError) {\r\n            const errors = {} as ValidationErrors<T>;\r\n            for (const error of err.inner) {\r\n                set(errors, error.path, error.message);\r\n            }\r\n            return errors;\r\n        }\r\n    }\r\n    return {} as ValidationErrors<T>;\r\n}\r\n\r\nexport function errorArray(errorObject: any): string[] {\r\n    const msgs: string[] = [];\r\n    if (!errorObject) return msgs;\r\n    for (const key in errorObject) {\r\n        if (Object.prototype.hasOwnProperty.call(errorObject, key)) {\r\n            const el = errorObject[key];\r\n            if (typeof el === \"string\") {\r\n                msgs.push(el);\r\n            }\r\n            if (Array.isArray(el)) {\r\n                el.forEach((e) => msgs.push(...errorArray(e)));\r\n            }\r\n            if (isObject(el)) {\r\n                msgs.push(...errorArray(el));\r\n            }\r\n        }\r\n    }\r\n\r\n    return msgs;\r\n}\r\n","import handlebars from \"handlebars\";\r\nimport raw from \"raw.macro\";\r\nimport { About } from \"./components/About\";\r\nimport jszip from \"jszip\";\r\nimport { FloorStore } from \"./StuffedFloorModGenerator\";\r\nimport { sanitizeString } from \"./utils\";\r\n\r\nconst aboutTemplate = handlebars.compile<About>(raw(\"./templates/About.xml\"));\r\nconst floorDefTemplate = handlebars.compile<FloorStore>(\r\n    raw(\"./templates/StuffedFloorDefs.xml\")\r\n);\r\n\r\nfunction RenderAbout(about: About) {\r\n    return aboutTemplate({\r\n        ...about,\r\n        validationErrors: about.validationErrors,\r\n        packageId: about.packageId,\r\n    });\r\n}\r\n\r\nfunction RenderFloors(floors: FloorStore) {\r\n    return floorDefTemplate(floors);\r\n}\r\n\r\nexport async function BuildMod(about: About, floors: FloorStore) {\r\n    const zip = new jszip();\r\n    const modFolder = sanitizeString(about.name);\r\n    const aboutXml = RenderAbout(about);\r\n    zip.file(`${modFolder}/About/About.xml`, aboutXml);\r\n\r\n    const floorXml = RenderFloors(floors);\r\n    zip.file(`${modFolder}/Defs/Floors.xml`, floorXml);\r\n\r\n    for (const floor of floors.floors) {\r\n        if (floor.texture?.out)\r\n            zip.file(\r\n                `${modFolder}/Textures/Floors/${floor.defName}.png`,\r\n                floor.texture.out.texture\r\n            );\r\n    }\r\n\r\n    return await zip.generateAsync({ type: \"blob\" });\r\n}\r\n","import React, { Component } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport { observer } from \"mobx-react\";\nimport { action, observable } from \"mobx\";\nimport { FloorStore, submitting } from \"../StuffedFloorModGenerator\";\nimport { About } from \"./About\";\nimport { BuildMod } from \"../mod-builder\";\nimport classNames from \"classnames\";\nimport isEmpty from \"lodash/isEmpty\";\n\ninterface DownloadButtonProps {\n    floors: FloorStore;\n    about: About;\n}\n\n@observer\nexport default class DownloadButton extends Component<DownloadButtonProps> {\n    @observable building = false;\n\n    @action\n    download = async () => {\n        const { floors, about } = this.props;\n        if (\n            floors.floors.some((floor) => !isEmpty(floor.validationErrors)) ||\n            !isEmpty(about.validationErrors)\n        ) {\n            submitting.set(true);\n            console.log({\n                floors: floors.floors.map((floor) => floor.validationErrors),\n                about: about.validationErrors,\n                truthy: {\n                    floors: floors.floors.some(\n                        (floor) => !isEmpty(floor.validationErrors)\n                    ),\n                    about: !isEmpty(about.validationErrors),\n                },\n            });\n            return;\n        } else {\n            this.building = true;\n        }\n        const archive = await BuildMod(about, floors);\n        saveAs(archive, `${this.props.about.name}.zip`);\n        this.building = false;\n    };\n\n    render() {\n        return (\n            <div id=\"download-frame\">\n                <button\n                    className={classNames({\n                        button: true,\n                        \"is-primary\": true,\n                        \"is-loading\": this.building,\n                    })}\n                    onClick={this.download}\n                >\n                    Download Mod\n                </button>\n            </div>\n        );\n    }\n}\n","import { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport { submitting } from \"../StuffedFloorModGenerator\";\r\n\r\nexport interface ErrorProps {\r\n    error?: string;\r\n    touched: boolean;\r\n}\r\n\r\n@observer\r\nexport class Error extends Component<ErrorProps> {\r\n    render() {\r\n        const { touched, error } = this.props;\r\n        return (\r\n            ((touched || submitting.get()) && error && (\r\n                <div className=\"error\">{error}</div>\r\n            )) ||\r\n            null\r\n        );\r\n    }\r\n}\r\n","import { action, observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, { Component, InputHTMLAttributes } from \"react\";\nimport { Error } from \"./Error\";\nimport classNames from \"classnames\";\n\ninterface InputProps\n    extends InputHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\n    label: string;\n    error?: string;\n    element?: any;\n    small?: boolean;\n}\n\n@observer\nexport default class Input extends Component<InputProps> {\n    @observable touched = false;\n\n    @action onBlur = () => {\n        this.touched = true;\n    };\n\n    render() {\n        const { id, label, error, element, small, ...inputProps } = this.props;\n\n        const Element = element ? (\n            React.cloneElement(element, {\n                ...inputProps,\n                id,\n                onBlur: this.onBlur,\n            })\n        ) : (\n            <input\n                className=\"input\"\n                {...inputProps}\n                id={id}\n                onBlur={this.onBlur}\n            />\n        );\n\n        if (small) {\n            return (\n                <div className=\"field is-horizontal\">\n                    <div className=\"field-label is-small\">\n                        <label htmlFor={id} className=\"label\">\n                            {label}\n                        </label>\n                    </div>\n                    <div className=\"field-body\">\n                        <div className=\"control\">{Element}</div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"field\">\n                    <label htmlFor={id} className=\"label\">\n                        {label}\n                    </label>\n                    <div className=\"control\">{Element}</div>\n                    <Error touched={this.touched} error={error} />\n                </div>\n            );\n        }\n    }\n}\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { computed, observable } from \"mobx\";\nimport { sanitizeString, unwrapErrors } from \"../utils\";\nimport * as yup from \"yup\";\nimport Input from \"./Input\";\n\ninterface AboutProps {\n    about: About;\n}\n\nexport class About {\n    @observable name: string = \"\";\n    @observable description: string = \"\";\n    @observable author: string = \"\";\n    @observable url: string = \"\";\n\n    @computed get packageId() {\n        return sanitizeString(this.author) + \".\" + sanitizeString(this.name);\n    }\n\n    @computed get validationErrors() {\n        return unwrapErrors<About>(this, AboutSchema);\n    }\n}\n\nexport const AboutSchema = yup.object({\n    name: yup.string().required(),\n    description: yup.string().required(),\n    author: yup.string().required(),\n    url: yup.string().url(),\n    packageId: yup.string().required(),\n});\n\n@observer\nexport default class AboutComponent extends Component<AboutProps> {\n    render() {\n        const {\n            name,\n            description,\n            author,\n            url,\n            validationErrors: errors,\n        } = this.props.about;\n        return (\n            <div id=\"about\">\n                <Input\n                    label=\"Mod Name\"\n                    id=\"mod.name\"\n                    value={name}\n                    onChange={(e) => (this.props.about.name = e.target.value)}\n                    error={errors.name}\n                />\n                <Input\n                    label=\"Mod Description\"\n                    id=\"mod.desc\"\n                    value={description}\n                    onChange={(e) =>\n                        (this.props.about.description = e.target.value)\n                    }\n                    error={errors.description}\n                    element={<textarea className=\"textarea\" />}\n                />\n                <Input\n                    label=\"Author\"\n                    id=\"mod.author\"\n                    value={author}\n                    onChange={(e) => (this.props.about.author = e.target.value)}\n                    error={errors.author}\n                />\n                <Input\n                    label=\"Link\"\n                    id=\"mod.url\"\n                    value={url}\n                    onChange={(e) => (this.props.about.url = e.target.value)}\n                    error={errors.url}\n                />\n            </div>\n        );\n    }\n}\n","import { action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, { Component, createRef } from \"react\";\nimport { TextureLoaderProps } from \"./Floor\";\n\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\n@observer\nexport default class FetchButton extends Component<TextureLoaderProps> {\n    inputRef = createRef<HTMLInputElement>();\n\n    @action\n    onSubmit = async () => {\n        const input = this.inputRef.current;\n        if (!input) return;\n\n        try {\n            const result = await fetch(CORS_PROXY + input.value);\n            const blob = await result.blob();\n            this.props.setTexture(blob);\n        } catch (err) {\n            console.error(`Error fetching ${input.value}: \\n${err}`);\n        }\n    };\n\n    render() {\n        return (\n            <div\n                className=\"field has-addons is-fullwidth\"\n                style={{ marginTop: \"1em\" }}\n            >\n                <div className=\"control is-expanded\">\n                    <input\n                        type=\"text\"\n                        className=\"input\"\n                        ref={this.inputRef}\n                        name=\"url\"\n                        id=\"url\"\n                    />\n                </div>\n                <div className=\"control\">\n                    <button\n                        className=\"button is-info fetch-button\"\n                        onClick={this.onSubmit}\n                    >\n                        Fetch\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","import { observer } from \"mobx-react\";\nimport React, { Component, createRef } from \"react\";\nimport { elementSize } from \"../utils\";\nimport { Texture } from \"./Texture\";\n\nexport interface TextureProps {\n    texture: Texture;\n}\n\n@observer\nexport default class TexturePreview extends Component<Partial<TextureProps>> {\n    canvasRef = createRef<HTMLCanvasElement>();\n\n    // todo: split into processing and render logic parts.\n    // processing:\n    // - take raw, and using the various settings create out.\n    // - tile/stretch/both when needed to get to 1024 x 1024\n    // - out is used as actual texture\n    // rendering:\n    // - take out, and render it in available area as preview.\n    // - overlay tiling and cell previews\n    componentDidUpdate = async () => {\n        const canvas = this.canvasRef.current;\n        if (!canvas || !this.props.texture?.out) return;\n        const { mirror } = this.props.texture.settings;\n        const availableSize = elementSize(canvas.parentElement!);\n        const textureData = await createImageBitmap(\n            this.props.texture.out.texture\n        );\n\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        canvas.width = Math.min(textureData.width, availableSize.width);\n        const scale = canvas.width / textureData.width;\n        canvas.height = textureData.height * scale;\n        ctx.scale(scale, scale);\n\n        if (mirror) {\n            const sw = textureData.width / 2,\n                sh = textureData.height / 2;\n\n            // render each quadrant in the opposite quadrant\n            ctx.drawImage(textureData, sw, sh, sw, sh, 0, 0, sw, sw); // br -> tl\n            ctx.drawImage(textureData, 0, sh, sw, sh, sw, 0, sw, sw); // bl -> tr\n            ctx.drawImage(textureData, 0, 0, sw, sh, sw, sw, sw, sw); // tl -> br\n            ctx.drawImage(textureData, sw, 0, sw, sh, 0, sw, sw, sw); // tr -> bl\n        } else {\n            // just render source in canvas\n            ctx.drawImage(textureData, 0, 0);\n        }\n\n        // game preview / overlay\n        if (this.props.texture.settings.grid) {\n            const width = textureData.width / 16;\n            const height = textureData.height / 16;\n            ctx.setLineDash([5]);\n            for (let x = 0; x < 16; x++) {\n                // vertical lines\n                ctx.moveTo(x * width, 0);\n                ctx.lineTo(x * width, textureData.height);\n            }\n            for (let y = 0; y < 16; y++) {\n                // horizontal lines\n                ctx.moveTo(0, y * height);\n                ctx.lineTo(textureData.width, y * height);\n            }\n            ctx.strokeStyle = \"steelblue\";\n            ctx.stroke();\n        }\n    };\n\n    render() {\n        const { texture } = this.props;\n        return (\n            <>\n                {texture && (\n                    <canvas\n                        ref={this.canvasRef}\n                        data-rendering={texture.rendering}\n                        data-revision={texture.settings.revision}\n                    ></canvas>\n                )}\n                {!texture && <div className=\"no-content\">No Texture</div>}\n            </>\n        );\n    }\n}\n","import { action, observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, { ChangeEvent, PureComponent } from \"react\";\nimport { TextureLoaderProps } from \"./Floor\";\n\n@observer\nexport default class UploadButton extends PureComponent<TextureLoaderProps> {\n    @observable target = \"\";\n    @action loadTexture = async (event: ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files?.length) {\n            const file = event.target.files[0];\n            this.props.setTexture(file);\n            this.target = file.name;\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"file is-fullwidth has-name is-right\">\n                <label className=\"file-label\">\n                    <input\n                        className=\"file-input\"\n                        type=\"file\"\n                        name=\"texture\"\n                        id=\"texture\"\n                        accept=\"image/*\"\n                        onChange={this.loadTexture}\n                    />\n                    <span className=\"file-cta fetch-button\">Upload</span>\n                    <span className=\"file-name\">{this.target}</span>\n                </label>\n            </div>\n        );\n    }\n}\n","import { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nexport type SwitchProps = React.InputHTMLAttributes<HTMLInputElement> & {\r\n    label: string;\r\n    rounded?: boolean;\r\n    outlined?: boolean;\r\n    small?: boolean;\r\n};\r\n\r\n@observer\r\nexport class Switch extends Component<SwitchProps> {\r\n    render() {\r\n        const {\r\n            id,\r\n            label,\r\n            onChange,\r\n            checked,\r\n            rounded,\r\n            outlined,\r\n            small,\r\n        } = this.props;\r\n        return (\r\n            <div className=\"field\">\r\n                <input\r\n                    id={id}\r\n                    type=\"checkbox\"\r\n                    className={classNames({\r\n                        switch: true,\r\n                        \"is-rounded\": rounded,\r\n                        \"is-outlined\": outlined,\r\n                        \"is-small\": small,\r\n                    })}\r\n                    checked={checked}\r\n                    onChange={onChange}\r\n                />\r\n                <label htmlFor={id}>{label}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport Input from \"./Input\";\r\nimport { Switch } from \"./Switch\";\r\nimport { TextureProps } from \"./TexturePreview\";\r\n\r\n@observer\r\nexport class TextureSize extends Component<TextureProps> {\r\n    render() {\r\n        const { texture } = this.props;\r\n        const { settings, toggleSetting, updateSetting } = texture;\r\n        return (\r\n            <div className=\"texture-size\">\r\n                <span className=\"help\">\r\n                    Texture size:{\" \"}\r\n                    {`${texture.raw.size.width} x ${texture.raw.size.height} (original)`}\r\n                    {settings.tile &&\r\n                        `, ${texture.raw.size.width * settings.tilesX} x ${\r\n                            texture.raw.size.height * settings.tilesY\r\n                        } (tiled)`}\r\n                    {settings.stretch && `, 1024 x 1024 (stretched)`}\r\n                </span>\r\n                <div className=\"columns\" style={{ alignItems: \"center\" }}>\r\n                    <div className=\"column\">\r\n                        <div\r\n                            className=\"columns\"\r\n                            style={{ alignItems: \"center\" }}\r\n                        >\r\n                            <div className=\"column\">\r\n                                <Switch\r\n                                    id=\"texture-tiling\"\r\n                                    label=\"Tile\"\r\n                                    small={true}\r\n                                    rounded={true}\r\n                                    outlined={true}\r\n                                    checked={settings.tile}\r\n                                    onChange={() => toggleSetting(\"tile\")}\r\n                                />\r\n                            </div>\r\n                            {settings.tile && (\r\n                                <>\r\n                                    <div className=\"column\">\r\n                                        <Input\r\n                                            id=\"texture-tiling-x\"\r\n                                            label=\"x\"\r\n                                            small={true}\r\n                                            element={\r\n                                                <input className=\"input is-small\" />\r\n                                            }\r\n                                            value={settings.tilesX}\r\n                                            onChange={(ev) =>\r\n                                                updateSetting(\r\n                                                    \"tilesX\",\r\n                                                    parseInt(ev.target.value) ||\r\n                                                        1\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"column\">\r\n                                        <Input\r\n                                            id=\"texture-tiling-y\"\r\n                                            label=\"y\"\r\n                                            small={true}\r\n                                            element={\r\n                                                <input className=\"input is-small\" />\r\n                                            }\r\n                                            value={settings.tilesY}\r\n                                            onChange={(ev) =>\r\n                                                updateSetting(\r\n                                                    \"tilesY\",\r\n                                                    parseInt(ev.target.value) ||\r\n                                                        1\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <Switch\r\n                            id=\"texture-stretching\"\r\n                            label=\"Stretch / Shrink\"\r\n                            small={true}\r\n                            rounded={true}\r\n                            outlined={true}\r\n                            checked={settings.stretch}\r\n                            onChange={() => toggleSetting(\"stretch\")}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { action, autorun, computed, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport FetchButton from \"./FetchButton\";\r\nimport { FloorProps } from \"./Floor\";\r\nimport TexturePreview from \"./TexturePreview\";\r\nimport UploadButton from \"./UploadButton\";\r\nimport * as yup from \"yup\";\r\nimport \"bulma-slider\";\r\nimport { errorArray } from \"../utils\";\r\nimport { Error } from \"./Error\";\r\nimport { TextureSize } from \"./TextureSize\";\r\nimport { Switch } from \"./Switch\";\r\nimport debounce from \"lodash/debounce\";\r\n\r\nexport interface TextureSettings {\r\n    contrast: number;\r\n    brightness: number;\r\n    mirror: boolean;\r\n    desaturate: boolean;\r\n    revision: number;\r\n    tile: boolean;\r\n    tilesX: number;\r\n    tilesY: number;\r\n    stretch: boolean;\r\n    grid: boolean;\r\n}\r\n\r\nexport const TextureSchema = yup.object().shape({\r\n    raw: yup.mixed().required(\"floor must have a texture\"),\r\n    out: yup\r\n        .object()\r\n        .required()\r\n        .shape({\r\n            texture: yup.mixed().required(),\r\n            size: yup.object().when(\"raw\", {\r\n                is: (raw) => !!raw,\r\n                then: yup\r\n                    .object()\r\n                    .shape({ width: yup.number(), height: yup.number() })\r\n                    .test(\r\n                        \"dims\",\r\n                        \"floor textures should be 1024x1024 pixels\",\r\n                        (size) => size?.height === 1024 && size.width === 1024\r\n                    )\r\n                    .required(),\r\n            }),\r\n        }),\r\n});\r\n\r\ntype settingUpdateFn = <\r\n    K extends keyof TextureSettings,\r\n    V extends TextureSettings[K]\r\n>(\r\n    setting: K,\r\n    value: V\r\n) => void;\r\n\r\ntype settingToggleFn = (setting: BooleanProperties<TextureSettings>) => void;\r\ntype Size = { width: number; height: number };\r\n\r\nexport class Texture {\r\n    @observable raw: {\r\n        texture: Blob;\r\n        size: Size;\r\n    };\r\n    @observable out?: {\r\n        texture: Blob;\r\n        size: Size;\r\n    };\r\n    @observable settings: TextureSettings;\r\n    @observable rendering: boolean = false;\r\n\r\n    @action updateSetting: settingUpdateFn = (setting, value): void => {\r\n        this.settings[setting] = value;\r\n        this.settings.revision++;\r\n    };\r\n\r\n    @action toggleSetting: settingToggleFn = (setting): void => {\r\n        this.settings[setting] = !this.settings[setting];\r\n        this.settings.revision++;\r\n    };\r\n\r\n    @action async updateTexture(settings: TextureSettings, raw: Blob) {\r\n        const canvas = this.renderCanvas;\r\n        const {\r\n            brightness,\r\n            desaturate,\r\n            contrast,\r\n            tile,\r\n            tilesX,\r\n            tilesY,\r\n            stretch,\r\n        } = settings;\r\n        if (!canvas || !raw) return;\r\n        this.rendering = true;\r\n\r\n        const rawData = await createImageBitmap(raw);\r\n\r\n        let width, height;\r\n        if (stretch) {\r\n            width = 1024;\r\n            height = 1024;\r\n        } else if (tile) {\r\n            width = tilesX * this.raw.size.width;\r\n            height = tilesY * this.raw.size.height;\r\n        } else {\r\n            width = this.raw.size.width;\r\n            height = this.raw.size.height;\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) return;\r\n\r\n        const filter = `contrast(${contrast / 100}) saturate(${\r\n            desaturate ? 0 : 1\r\n        }) brightness(${brightness / 100})`;\r\n        ctx!.filter = filter;\r\n\r\n        if (tile) {\r\n            const dest = {\r\n                // take account of possible stretching\r\n                width: width / tilesX,\r\n                height: height / tilesY,\r\n            };\r\n            for (let x = 0; x < tilesX; x++) {\r\n                for (let y = 0; y < tilesY; y++) {\r\n                    // draw image in each tile\r\n                    ctx.drawImage(\r\n                        rawData,\r\n                        x * dest.width,\r\n                        y * dest.height,\r\n                        dest.width,\r\n                        dest.height\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            ctx.drawImage(rawData, 0, 0, width, height);\r\n        }\r\n\r\n        // after rendering canvas, update out texture\r\n        canvas.toBlob((blob) => {\r\n            if (blob)\r\n                this.out = {\r\n                    texture: blob,\r\n                    size: { width: canvas.width, height: canvas.height },\r\n                };\r\n            else {\r\n                console.error(\"failed creating out texture\");\r\n            }\r\n            this.rendering = false;\r\n        });\r\n    }\r\n\r\n    setTiles() {\r\n        this.settings.tilesX = Math.floor(1024 / this.raw.size.width);\r\n        this.settings.tilesY = Math.floor(1024 / this.raw.size.height);\r\n    }\r\n    private setRawSize = async () => {\r\n        const image = await createImageBitmap(this.raw.texture);\r\n        this.raw.size = {\r\n            width: image.width,\r\n            height: image.height,\r\n        };\r\n        this.setTiles();\r\n    };\r\n    private renderCanvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n    private updateTextureDebounced = debounce(this.updateTexture, 500, {\r\n        trailing: true,\r\n        leading: true,\r\n        maxWait: 500,\r\n    });\r\n\r\n    constructor(raw: Blob) {\r\n        this.raw = {\r\n            texture: raw,\r\n            size: {\r\n                width: 0,\r\n                height: 0,\r\n            },\r\n        };\r\n        this.settings = {\r\n            contrast: 100,\r\n            brightness: 100,\r\n            mirror: false,\r\n            desaturate: false,\r\n            tile: false,\r\n            tilesX: 1,\r\n            tilesY: 1,\r\n            stretch: false,\r\n            revision: 0,\r\n            grid: false,\r\n        };\r\n        this.setRawSize();\r\n        autorun(\r\n            () => {\r\n                const { settings, raw } = this;\r\n\r\n                // revisions are incremented by settings changes, track it here to trigger autoruns.\r\n                /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n                const revision = settings.revision;\r\n                if (raw) this.updateTextureDebounced(settings, raw.texture);\r\n            },\r\n            {\r\n                name: \"updateTexture\",\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nexport default class TextureComponent extends Component<FloorProps> {\r\n    @action updateTexture = (texture: Blob) => {\r\n        this.props.floor.texture = new Texture(texture);\r\n    };\r\n\r\n    @computed get errors(): string[] {\r\n        // console.log(\r\n        //     this.props.floor.validationErrors.texture,\r\n        //     errorArray(this.props.floor.validationErrors.texture as any)\r\n        // );\r\n        return errorArray(this.props.floor.validationErrors.texture as any);\r\n    }\r\n\r\n    render() {\r\n        const { floor } = this.props;\r\n        const { texture } = floor;\r\n        return (\r\n            <>\r\n                <label className=\"label\">Texture</label>\r\n                {!texture && (\r\n                    <>\r\n                        <UploadButton\r\n                            setTexture={this.updateTexture}\r\n                        ></UploadButton>\r\n                        <FetchButton\r\n                            setTexture={this.updateTexture}\r\n                        ></FetchButton>\r\n                    </>\r\n                )}\r\n                <TexturePreview texture={texture} />\r\n                {this.errors &&\r\n                    this.errors.map((error, index) => (\r\n                        <Error touched={false} error={error} key={index} />\r\n                    ))}\r\n                {texture && <TextureSize texture={texture} />}\r\n                {texture && (\r\n                    <>\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <Switch\r\n                                    id={`${floor.id}-mirror`}\r\n                                    rounded={true}\r\n                                    outlined={true}\r\n                                    small={true}\r\n                                    label=\"Check pattern tiling\"\r\n                                    checked={texture.settings.mirror}\r\n                                    onChange={() =>\r\n                                        texture.toggleSetting(\"mirror\")\r\n                                    }\r\n                                />\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <Switch\r\n                                    id={`${floor.id}-grid`}\r\n                                    rounded={true}\r\n                                    outlined={true}\r\n                                    small={true}\r\n                                    label=\"Show floor grid\"\r\n                                    checked={texture.settings.grid}\r\n                                    onChange={() =>\r\n                                        texture.toggleSetting(\"grid\")\r\n                                    }\r\n                                />\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <Switch\r\n                                    id={`${floor.id}-desaturate`}\r\n                                    rounded={true}\r\n                                    outlined={true}\r\n                                    small={true}\r\n                                    label=\"Desaturate\"\r\n                                    checked={texture.settings.desaturate}\r\n                                    onChange={() =>\r\n                                        texture.toggleSetting(\"desaturate\")\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">\r\n                                Contrast: {texture.settings.contrast}%\r\n                            </label>\r\n                            <input\r\n                                className=\"slider is-fullwidth is-small is-primary\"\r\n                                step=\"1\"\r\n                                min=\"0\"\r\n                                max=\"200\"\r\n                                value={texture.settings.contrast}\r\n                                onChange={(ev) =>\r\n                                    texture.updateSetting(\r\n                                        \"contrast\",\r\n                                        parseInt(ev.target.value)\r\n                                    )\r\n                                }\r\n                                type=\"range\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">\r\n                                Brightness: {texture.settings.brightness}%\r\n                            </label>\r\n                            <input\r\n                                className=\"slider is-fullwidth is-small is-primary\"\r\n                                step=\"1\"\r\n                                min=\"0\"\r\n                                max=\"200\"\r\n                                value={texture.settings.brightness}\r\n                                onChange={(ev) =>\r\n                                    texture.updateSetting(\r\n                                        \"brightness\",\r\n                                        parseInt(ev.target.value)\r\n                                    )\r\n                                }\r\n                                type=\"range\"\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n","export const simpleMode_materials: Material[] = [\r\n    \"Stone\",\r\n    \"Wood\",\r\n    \"Cloth\",\r\n    \"Metal\",\r\n];\r\n\r\nexport const simpleMode_stuffCategories: { [key in Material]: string[] } = {\r\n    Stone: [\"Stony\"],\r\n    Wood: [\"Woody\"],\r\n    Metal: [\"Metallic\"],\r\n    Cloth: [\"Fabric\"],\r\n};\r\n\r\nexport const simpleMode_type: Type[] = [\"Basic\", \"Pretty\", \"Royal\"];\r\n\r\nexport const simpleMode_stuffCost: { [key in Type]: number } = {\r\n    Basic: 4,\r\n    Pretty: 4,\r\n    Royal: 10,\r\n};\r\n\r\nexport const simpleMode_tags: { [key in Type]: string[] } = {\r\n    Basic: [\"Floor\"],\r\n    Pretty: [\"Floor\"],\r\n    Royal: [\"Floor\", \"FineFloor\"],\r\n};\r\n\r\nexport const simpleMode_researchPrerequisites: {\r\n    [mat in Material]: { [key in Type]: string[] };\r\n} = {\r\n    Stone: {\r\n        Basic: [],\r\n        Pretty: [\"Stonecutting\"],\r\n        Royal: [\"Stonecutting\"],\r\n    },\r\n    Wood: {\r\n        Basic: [],\r\n        Pretty: [],\r\n        Royal: [],\r\n    },\r\n    Metal: {\r\n        Basic: [],\r\n        Pretty: [\"Machining\"],\r\n        Royal: [\"Machining\"],\r\n    },\r\n    Cloth: {\r\n        Basic: [\"CarpetMaking\"],\r\n        Pretty: [\"CarpetMaking\"],\r\n        Royal: [\"CarpetMaking\"],\r\n    },\r\n};\r\n\r\nexport const simpleMode_affordances: { [mat in Material]: string[] } = {\r\n    Stone: [\"Light\", \"Medium\", \"Heavy\"],\r\n    Wood: [\"Light\", \"Medium\", \"Heavy\"],\r\n    Metal: [\"Light\", \"Medium\", \"Heavy\"],\r\n    Cloth: [\"Light\", \"Medium\", \"Heavy\"],\r\n};\r\n\r\nexport const simpleMode_affordanceNeeded: { [mat in Material]: string } = {\r\n    Stone: \"Heavy\",\r\n    Wood: \"Heavy\",\r\n    Metal: \"Heavy\",\r\n    Cloth: \"Heavy\",\r\n};\r\n\r\nexport const simpleMode_burnedTerrain: Partial<\r\n    { [mat in Material]: string }\r\n> = {\r\n    Wood: \"BurnedWoodPlankFloor\",\r\n    Cloth: \"BurnedCarpet\",\r\n};\r\n\r\nexport const simpleMode_stats: {\r\n    [mat in Material]: { [key in Type]: defValue[] };\r\n} = {\r\n    Stone: {\r\n        Basic: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 75,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 0,\r\n            },\r\n        ],\r\n        Pretty: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 150,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 2,\r\n            },\r\n        ],\r\n        Royal: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 800,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 3,\r\n            },\r\n        ],\r\n    },\r\n    Wood: {\r\n        Basic: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 250,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 0,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Flammability\",\r\n                value: 0.25,\r\n            },\r\n        ],\r\n        Pretty: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 400,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 2,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Flammability\",\r\n                value: 0.2,\r\n            },\r\n        ],\r\n        Royal: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 2100,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 3,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Flammability\",\r\n                value: 0.2,\r\n            },\r\n        ],\r\n    },\r\n    Cloth: {\r\n        Basic: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 250,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 0,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Flammability\",\r\n                value: 0.25,\r\n            },\r\n        ],\r\n        Pretty: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 400,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 2,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Flammability\",\r\n                value: 0.2,\r\n            },\r\n        ],\r\n        Royal: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 2100,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 3,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Flammability\",\r\n                value: 0.2,\r\n            },\r\n        ],\r\n    },\r\n    Metal: {\r\n        Basic: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 800,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 0,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Cleanliness\",\r\n                value: 0.1,\r\n            },\r\n        ],\r\n        Pretty: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 1500,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 2,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Cleanliness\",\r\n                value: 0.2,\r\n            },\r\n        ],\r\n        Royal: [\r\n            {\r\n                id: 1,\r\n                def: \"WorkToBuild\",\r\n                value: 8000,\r\n            },\r\n            {\r\n                id: 2,\r\n                def: \"Beauty\",\r\n                value: 3,\r\n            },\r\n            {\r\n                id: 3,\r\n                def: \"Cleanliness\",\r\n                value: 0.3,\r\n            },\r\n        ],\r\n    },\r\n};\r\n","export const stuffCategories = [\r\n    \"Metallic\",\r\n    \"Woody\",\r\n    \"Stony\",\r\n    \"Fabric\",\r\n    \"Leathery\",\r\n];\r\n\r\nexport const affordances: Affordance[] = [\r\n    \"Light\",\r\n    \"Medium\",\r\n    \"Heavy\",\r\n    \"Diggable\",\r\n    \"GrowSoil\",\r\n];\r\n\r\nexport const tags: string[] = [\"Floor\", \"FineFloor\"];\r\n\r\nexport const researchDefs: string[] = [\r\n    \"Machining\",\r\n    \"CarpetMaking\",\r\n    \"Stonecutting\",\r\n];\r\n\r\nexport const burnedFloorDefs: string[] = [\r\n    \"BurnedCarpet\",\r\n    \"BurnedWoodPlankFloor\",\r\n];\r\n","export const edgeTypes: EdgeType[] = [\"Fade\", \"FadeRough\", \"Hard\"];\r\n","import classNames from \"classnames\";\r\nimport { action, computed } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport { DeleteX } from \"../StuffedFloorModGenerator\";\r\nimport { errorArray, ValidationErrors } from \"../utils\";\r\nimport { Error } from \"./Error\";\r\n\r\ninterface CostListProps {\r\n    id: string;\r\n    costs: defValue[];\r\n    errors?: ValidationErrors<defValue>[];\r\n}\r\n\r\n@observer\r\nexport default class CostList extends Component<CostListProps> {\r\n    static costCount = 0;\r\n\r\n    @computed get errorArray(): string[] {\r\n        const { errors } = this.props;\r\n        const msgs: string[] = [];\r\n        if (errors) {\r\n            for (const error of errors) {\r\n                msgs.push(...errorArray(error));\r\n            }\r\n        }\r\n        return [...new Set(msgs)];\r\n    }\r\n\r\n    @action add = () => {\r\n        this.props.costs.push({\r\n            id: `cost-${this.props.id}-${CostList.costCount++}`,\r\n            def: \"\",\r\n            value: 0,\r\n        });\r\n    };\r\n\r\n    @action delete = (id: id) => {\r\n        const removing = this.props.costs.findIndex((cost) => cost.id === id);\r\n        if (removing < 0) return;\r\n        this.props.costs.splice(removing, 1);\r\n    };\r\n\r\n    render() {\r\n        const { costs, errors } = this.props;\r\n\r\n        return (\r\n            <div className=\"field\">\r\n                <label className=\"label\">CostList</label>\r\n                <div className=\"costlist tags\">\r\n                    {costs.map((defCount, index) => (\r\n                        <Cost\r\n                            cost={defCount}\r\n                            key={defCount.id}\r\n                            onDelete={this.delete}\r\n                            errors={errors?.[index]}\r\n                        />\r\n                    ))}\r\n                    <button\r\n                        className=\"button is-success is-small\"\r\n                        onClick={this.add}\r\n                    >\r\n                        Add Cost\r\n                    </button>\r\n                </div>\r\n                {this.errorArray.map((msg, index) => (\r\n                    <Error touched={true} error={msg} key={index} />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface CostProps {\r\n    cost: defValue;\r\n    errors?: ValidationErrors<defValue>;\r\n    onDelete: (id: id) => void;\r\n}\r\n\r\n@observer\r\nexport class Cost extends Component<CostProps> {\r\n    render() {\r\n        const { cost, onDelete, errors } = this.props;\r\n        return (\r\n            <div className=\"defCount tag is-info\">\r\n                <input\r\n                    id={`defCount-count-${cost.id}`}\r\n                    placeholder=\"count\"\r\n                    value={cost.value}\r\n                    onChange={(e) =>\r\n                        (cost.value = parseInt(e.target.value) || 0)\r\n                    }\r\n                    style={{\r\n                        width: `calc( ${\r\n                            cost.value.toString().length\r\n                        }ch + 5px )`,\r\n                    }}\r\n                    className={classNames({\r\n                        blank: cost.value === 0,\r\n                        error: errors?.value,\r\n                    })}\r\n                />\r\n                ×\r\n                <input\r\n                    id={`defCount-def-${cost.id}`}\r\n                    placeholder=\"thingDef\"\r\n                    value={cost.def}\r\n                    onChange={(e) => (cost.def = e.target.value)}\r\n                    style={{\r\n                        width: cost.def\r\n                            ? `calc( ${cost.def.length}ch + 10px )`\r\n                            : `calc( ${\"thingDef\".length}ch + 10px )`,\r\n                    }}\r\n                    className={classNames({\r\n                        blank: !cost.def,\r\n                        error: errors?.def,\r\n                    })}\r\n                />\r\n                <div className=\"remove\" onClick={() => onDelete(cost.id)}>\r\n                    <DeleteX />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import classNames from \"classnames\";\r\nimport { action, computed, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { ChangeEvent, Component } from \"react\";\r\nimport { DeleteX } from \"../StuffedFloorModGenerator\";\r\nimport { errorArray, ValidationErrors } from \"../utils\";\r\nimport { Error } from \"./Error\";\r\n\r\ninterface StatListProps {\r\n    id: string;\r\n    stats: defValue[];\r\n    errors?: ValidationErrors<defValue>[];\r\n}\r\n\r\n@observer\r\nexport default class StatList extends Component<StatListProps> {\r\n    static statCount = 0;\r\n\r\n    @computed get errorArray(): string[] {\r\n        const { errors } = this.props;\r\n        const msgs: string[] = [];\r\n        if (errors) {\r\n            for (const error of errors) {\r\n                msgs.push(...errorArray(error));\r\n            }\r\n        }\r\n        return [...new Set(msgs)];\r\n    }\r\n\r\n    @action add = () => {\r\n        this.props.stats.push({\r\n            id: `stat-${this.props.id}-${StatList.statCount++}`,\r\n            def: \"\",\r\n            value: 0,\r\n        });\r\n    };\r\n\r\n    @action delete = (id: id) => {\r\n        const removing = this.props.stats.findIndex((stat) => stat.id === id);\r\n        if (removing < 0) return;\r\n        this.props.stats.splice(removing, 1);\r\n    };\r\n\r\n    render() {\r\n        const { stats, errors } = this.props;\r\n\r\n        return (\r\n            <div className=\"field\">\r\n                <label className=\"label\">StatList</label>\r\n                <div className=\"statlist tags\">\r\n                    {stats.map((stat, index) => (\r\n                        <Stat\r\n                            stat={stat}\r\n                            key={stat.id}\r\n                            onDelete={this.delete}\r\n                            errors={errors?.[index]}\r\n                        />\r\n                    ))}\r\n                    <button\r\n                        className=\"button is-success is-small\"\r\n                        onClick={this.add}\r\n                    >\r\n                        Add Stat\r\n                    </button>\r\n                </div>\r\n                {this.errorArray.map((msg, index) => (\r\n                    <Error touched={true} error={msg} key={index} />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface StatProps {\r\n    stat: defValue;\r\n    errors?: ValidationErrors<defValue>;\r\n    onDelete: (id: id) => void;\r\n}\r\n\r\ninterface StatState {\r\n    valueTemp: string;\r\n}\r\n\r\n@observer\r\nexport class Stat extends Component<StatProps, StatState> {\r\n    @observable valueTemp: string;\r\n\r\n    @action updateValue = (ev: ChangeEvent<HTMLInputElement>): void => {\r\n        this.valueTemp = ev.target.value;\r\n    };\r\n\r\n    @action applyValue = (): void => {\r\n        this.props.stat.value =\r\n            parseFloat(this.valueTemp.replace(/,/g, \".\")) || 0;\r\n        this.valueTemp = this.props.stat.value.toString();\r\n    };\r\n\r\n    constructor(props: StatProps) {\r\n        super(props);\r\n        this.valueTemp = props.stat.value.toString();\r\n    }\r\n\r\n    render() {\r\n        const { stat, errors, onDelete } = this.props;\r\n        return (\r\n            <div className=\"defCount tag is-info\">\r\n                <input\r\n                    id={`defCount-def-${stat.id}`}\r\n                    placeholder=\"thingDef\"\r\n                    value={stat.def}\r\n                    onChange={(e) => (stat.def = e.target.value)}\r\n                    style={{\r\n                        width: stat.def\r\n                            ? `calc( ${stat.def.length}ch + 10px )`\r\n                            : `calc( ${\"thingDef\".length}ch + 10px )`,\r\n                    }}\r\n                    className={classNames({\r\n                        blank: !stat.def,\r\n                        error: errors?.def,\r\n                    })}\r\n                />\r\n                =\r\n                <input\r\n                    id={`defCount-count-${stat.id}`}\r\n                    value={this.valueTemp}\r\n                    onChange={this.updateValue}\r\n                    onBlur={this.applyValue}\r\n                    style={{\r\n                        width: `calc( ${\r\n                            this.valueTemp.toString().length\r\n                        }ch + 5px )`,\r\n                    }}\r\n                    className={classNames({\r\n                        blank: stat.value === 0,\r\n                        error: errors?.value,\r\n                    })}\r\n                />\r\n                <div className=\"remove\" onClick={() => onDelete(stat.id)}>\r\n                    <DeleteX />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import uniq from \"lodash/uniq\";\r\nimport { action, computed, IObservableArray, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport {\r\n    ActionMeta,\r\n    OptionsType,\r\n    OptionTypeBase,\r\n    ValueType,\r\n} from \"react-select\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { Error } from \"./Error\";\r\n\r\ninterface StringListProps {\r\n    label: string;\r\n    selected: IObservableArray<string>;\r\n    options: string[];\r\n    errors?: string[];\r\n    id: string;\r\n}\r\n\r\n@observer\r\nexport class StringList extends Component<StringListProps> {\r\n    @computed get options() {\r\n        return this.props.options.map((o) => ({ label: o, value: o }));\r\n    }\r\n\r\n    @observable touched = false;\r\n\r\n    @action\r\n    handleChange = (\r\n        _value: ValueType<OptionTypeBase>,\r\n        meta: ActionMeta<OptionTypeBase>\r\n    ) => {\r\n        const value = _value as OptionsType<OptionTypeBase>;\r\n        const { selected } = this.props;\r\n        this.touched = true;\r\n        switch (meta.action) {\r\n            case \"clear\":\r\n                selected.clear();\r\n                break;\r\n            case \"select-option\":\r\n                selected.push(meta.option!.value);\r\n                break;\r\n            case \"create-option\":\r\n                // new option is not listed in meta,\r\n                // add whatever we don't already have\r\n                // should be one element, but it can't\r\n                // hurt to be safe, right?...\r\n                const newOptions = value.filter(\r\n                    (v) => selected.indexOf(v.value) < 0\r\n                );\r\n                for (const option of newOptions) {\r\n                    selected.push(option.value);\r\n                }\r\n                break;\r\n            case \"pop-value\":\r\n            case \"remove-value\":\r\n                const index = selected.indexOf(meta.removedValue!.value);\r\n                if (index >= 0) {\r\n                    selected.splice(index, 1);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    render() {\r\n        const { label, selected, id, errors } = this.props;\r\n        const msgs = Array.isArray(errors) ? errors : [errors];\r\n        return (\r\n            <div className=\"field\">\r\n                <label className=\"label\" htmlFor={id}>\r\n                    {label}\r\n                </label>\r\n                <CreatableSelect\r\n                    id={id}\r\n                    isMulti\r\n                    onChange={this.handleChange}\r\n                    onBlur={() => (this.touched = true)}\r\n                    options={this.options}\r\n                    value={selected.map((cat) => ({\r\n                        label: cat,\r\n                        value: cat,\r\n                    }))}\r\n                    className=\"react-select\"\r\n                    classNamePrefix=\" \"\r\n                />\r\n                {errors &&\r\n                    uniq(msgs).map((error, index) => (\r\n                        <Error\r\n                            touched={this.touched}\r\n                            error={error}\r\n                            key={index}\r\n                        />\r\n                    ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport { ValueType } from \"react-select\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { Error } from \"./Error\";\r\n\r\ninterface StringWithDefaultProps {\r\n    label: string;\r\n    selected: string;\r\n    options: string[];\r\n    error?: string;\r\n    id: string;\r\n    noneOption?: boolean;\r\n    updateSelected: (value: string) => void;\r\n}\r\n\r\n@observer\r\nexport class StringWithDefaults extends Component<StringWithDefaultProps> {\r\n    @observable touched = false;\r\n\r\n    @computed get selectedOption(): option | undefined {\r\n        const { selected } = this.props;\r\n        if (selected) {\r\n            return {\r\n                label: selected,\r\n                value: selected,\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    @computed get options(): option[] {\r\n        const opts = this.props.options.map((o) => ({ value: o, label: o }));\r\n        if (this.props.noneOption) opts.push({ value: \"\", label: \"<None>\" });\r\n        return opts;\r\n    }\r\n\r\n    @action onChange = (value: ValueType<option>) => {\r\n        this.touched = true;\r\n        this.props.updateSelected((value as option).value);\r\n    };\r\n\r\n    render() {\r\n        const { label, id, error } = this.props;\r\n        return (\r\n            <div className=\"field\">\r\n                <label className=\"label\" htmlFor={id}>\r\n                    {label}\r\n                </label>\r\n                <CreatableSelect\r\n                    id={id}\r\n                    onChange={this.onChange}\r\n                    onBlur={() => (this.touched = true)}\r\n                    options={this.options}\r\n                    value={this.selectedOption}\r\n                    className=\"react-select\"\r\n                    classNamePrefix=\" \"\r\n                />\r\n                <Error touched={this.touched} error={error} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { action, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { simpleMode_materials, simpleMode_type } from \"../data/defaults\";\r\nimport {\r\n    stuffCategories,\r\n    researchDefs,\r\n    burnedFloorDefs,\r\n    affordances,\r\n    tags,\r\n} from \"../data/defs\";\r\nimport { edgeTypes } from \"../data/enums\";\r\nimport CostList from \"./CostList\";\r\nimport { FloorProps } from \"./Floor\";\r\nimport StatList from \"./StatList\";\r\nimport { StringList } from \"./StringList\";\r\nimport Input from \"./Input\";\r\nimport { StringWithDefaults } from \"./StringWithDefaults\";\r\n\r\n@observer\r\nexport class FloorSettings extends Component<FloorProps> {\r\n    @observable detailed: boolean = false;\r\n    @observable simple: SimpleSettings = {\r\n        material: \"Wood\",\r\n        type: \"Pretty\",\r\n    };\r\n\r\n    @action toggleDetailed = () => {\r\n        this.detailed = !this.detailed;\r\n\r\n        if (!this.detailed)\r\n            this.props.floor.resetFloor(this.simple.material, this.simple.type);\r\n    };\r\n\r\n    @action setMaterial = (material: Material) => {\r\n        this.simple.material = material;\r\n        this.props.floor.resetFloor(material, this.simple.type);\r\n    };\r\n\r\n    @action setType = (type: Type) => {\r\n        this.simple.type = type;\r\n        this.props.floor.resetFloor(this.simple.material, type);\r\n    };\r\n\r\n    render() {\r\n        const { floor } = this.props;\r\n        const settings = this.detailed ? (\r\n            /* eslint-disable react/jsx-pascal-case */\r\n            <FloorSettings_Detail floor={floor}></FloorSettings_Detail>\r\n        ) : (\r\n            <FloorSettings_Simple\r\n                floor={floor}\r\n                settings={this.simple}\r\n                setMaterial={this.setMaterial}\r\n                setType={this.setType}\r\n            ></FloorSettings_Simple>\r\n            /* eslint-enable react/jsx-pascal-case */\r\n        );\r\n\r\n        return (\r\n            <div className=\"settings\">\r\n                <div className=\"field\">\r\n                    <input\r\n                        id={`${floor.id}-settings-detailed`}\r\n                        type=\"checkbox\"\r\n                        className=\"switch is-rounded is-outlined is-small\"\r\n                        checked={this.detailed}\r\n                        onChange={this.toggleDetailed}\r\n                    />\r\n                    <label htmlFor={`${floor.id}-settings-detailed`}>\r\n                        advanced mode\r\n                    </label>\r\n                </div>\r\n                {settings}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n@observer\r\nexport class FloorSettings_Detail extends Component<FloorProps> {\r\n    render() {\r\n        const { floor } = this.props;\r\n        const { validationErrors: errors } = floor;\r\n        return (\r\n            <div className=\"settings-detail\">\r\n                <StringList\r\n                    label=\"Stuff Categories\"\r\n                    id={`${floor.id}-stuff-categories`}\r\n                    options={stuffCategories}\r\n                    selected={floor.stuffCategories}\r\n                    errors={errors.stuffCategories}\r\n                ></StringList>\r\n                <Input\r\n                    label=\"Stuff Cost\"\r\n                    value={floor.stuffcost}\r\n                    id={`${floor.id}-stuff-cost`}\r\n                    onChange={(e) =>\r\n                        (floor.stuffcost = parseInt(e.target.value) || 0)\r\n                    }\r\n                    error={errors.stuffcost}\r\n                />\r\n                <CostList\r\n                    {...floor}\r\n                    errors={floor.validationErrors.costs}\r\n                ></CostList>\r\n                <StatList\r\n                    {...floor}\r\n                    errors={floor.validationErrors.stats}\r\n                ></StatList>\r\n                <StringList\r\n                    label=\"Research Prerequisites\"\r\n                    id={`${floor.id}-research-prerequisites`}\r\n                    options={researchDefs}\r\n                    selected={floor.researchPrerequisites}\r\n                    errors={errors.researchPrerequisites}\r\n                ></StringList>\r\n                <StringWithDefaults\r\n                    label=\"Burned Def\"\r\n                    id={`${floor.id}-burned-def`}\r\n                    selected={floor.burnedDef || \"\"}\r\n                    options={burnedFloorDefs}\r\n                    error={errors.burnedDef}\r\n                    updateSelected={(value) => (floor.burnedDef = value)}\r\n                />\r\n                <div className=\"field\">\r\n                    <label htmlFor={`${floor.id}-edge-type`} className=\"label\">\r\n                        Edge Type\r\n                    </label>\r\n                    <Select\r\n                        id={`${floor.id}-edge-type`}\r\n                        defaultValue={{\r\n                            label: floor.edgeType as string,\r\n                            value: floor.edgeType as string,\r\n                        }}\r\n                        onChange={(_option) => {\r\n                            const option = _option as option;\r\n                            floor.edgeType = option.value as EdgeType;\r\n                        }}\r\n                        options={edgeTypes.map((edge) => ({\r\n                            label: edge,\r\n                            value: edge,\r\n                        }))}\r\n                        className=\"react-select\"\r\n                        classNamePrefix=\" \"\r\n                    ></Select>\r\n                </div>\r\n                <StringWithDefaults\r\n                    label=\"Affordance Needed\"\r\n                    id={`${floor.id}-affordance-needed`}\r\n                    selected={floor.terrainAffordanceNeeded}\r\n                    options={affordances}\r\n                    updateSelected={(value) =>\r\n                        (floor.terrainAffordanceNeeded = value as Affordance)\r\n                    }\r\n                    error={errors.terrainAffordanceNeeded}\r\n                />\r\n                <StringList\r\n                    label=\"Affordances\"\r\n                    id={`${floor.id}-affordances`}\r\n                    options={affordances}\r\n                    selected={floor.affordances}\r\n                    errors={errors.affordances}\r\n                ></StringList>\r\n                <StringList\r\n                    label=\"Tags\"\r\n                    id={`${floor.id}-tags`}\r\n                    options={tags}\r\n                    selected={floor.tags}\r\n                    errors={errors.tags}\r\n                ></StringList>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport interface SimpleSettings {\r\n    material: Material;\r\n    type: Type;\r\n}\r\n\r\ninterface SimpleSettingsProps extends FloorProps {\r\n    settings: SimpleSettings;\r\n    setMaterial: (mat: Material) => void;\r\n    setType: (type: Type) => void;\r\n}\r\n\r\n@observer\r\nexport class FloorSettings_Simple extends Component<SimpleSettingsProps> {\r\n    render() {\r\n        const { settings, floor, setMaterial, setType } = this.props;\r\n        return (\r\n            <div className=\"settings-simple\">\r\n                <div className=\"field\">\r\n                    <label\r\n                        htmlFor={`${floor.id}-simple-material`}\r\n                        className=\"label\"\r\n                    >\r\n                        Material\r\n                    </label>\r\n                    <Select\r\n                        id={`${floor.id}-simple-material`}\r\n                        defaultValue={{\r\n                            label: settings.material,\r\n                            value: settings.material,\r\n                        }}\r\n                        onChange={(_option) => {\r\n                            const option = _option as option;\r\n                            setMaterial(option.value as Material);\r\n                        }}\r\n                        options={simpleMode_materials.map((mat) => ({\r\n                            label: mat,\r\n                            value: mat,\r\n                        }))}\r\n                        className=\"react-select\"\r\n                        classNamePrefix=\" \"\r\n                    ></Select>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label\r\n                        htmlFor={`${floor.id}-simple-type`}\r\n                        className=\"label\"\r\n                    >\r\n                        Beauty\r\n                    </label>\r\n                    <Select\r\n                        id={`${floor.id}-simple-type`}\r\n                        defaultValue={{\r\n                            label: settings.type,\r\n                            value: settings.type,\r\n                        }}\r\n                        onChange={(_option) => {\r\n                            const option = _option as option;\r\n                            setType(option.value as Type);\r\n                        }}\r\n                        options={simpleMode_type.map((type) => ({\r\n                            label: type,\r\n                            value: type,\r\n                        }))}\r\n                        className=\"react-select\"\r\n                        classNamePrefix=\" \"\r\n                    ></Select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport { FloorProps } from \"./Floor\";\r\nimport Input from \"./Input\";\r\n\r\n@observer\r\nexport class FloorBasics extends Component<FloorProps> {\r\n    render() {\r\n        const { floor } = this.props;\r\n        const { validationErrors: errors } = floor;\r\n\r\n        return (\r\n            <>\r\n                <Input\r\n                    label=\"Label\"\r\n                    error={errors.label}\r\n                    id={`${floor.id}-label`}\r\n                    value={floor.label}\r\n                    onChange={(e) => (floor.label = e.target.value)}\r\n                />\r\n                <Input\r\n                    label=\"Description\"\r\n                    id={`${floor.id}-desc`}\r\n                    value={floor.description}\r\n                    onChange={(e) => (floor.description = e.target.value)}\r\n                    error={errors.description}\r\n                    element={<textarea className=\"textarea\" />}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport { sanitizeString, unwrapErrors } from \"../utils\";\nimport TextureComponent, { Texture, TextureSchema } from \"./Texture\";\nimport {\n    simpleMode_stuffCost,\n    simpleMode_stats,\n    simpleMode_stuffCategories,\n    simpleMode_researchPrerequisites,\n    simpleMode_tags,\n    simpleMode_burnedTerrain,\n} from \"../data/defaults\";\nimport { about } from \"../StuffedFloorModGenerator\";\nimport * as yup from \"yup\";\nimport { FloorSettings } from \"./FloorSettings\";\nimport { FloorBasics } from \"./FloorBasics\";\nimport random from \"lodash/random\";\n\nexport interface FloorProps {\n    floor: Floor;\n}\n\nexport const DefSchema = yup\n    .string()\n    .label(\"def\")\n    .trim()\n    .matches(\n        /^[a-z]+[a-z0-9_\\.]*$/i,\n        \"def must start with a letter, and may not contain spaces or special characters other than '_'\"\n    );\nexport const CostSchema = yup.object().shape({\n    def: DefSchema.required(),\n    value: yup.number().label(\"cost\").required().moreThan(0),\n});\nexport const StatSchema = yup.object().shape({\n    def: DefSchema.required(),\n    value: yup.number().label(\"stat\").required(),\n});\n\nexport const FloorSchema = yup.object().shape({\n    defName: yup.string().required(),\n    label: yup.string().required(),\n    description: yup.string().required(),\n    texture: TextureSchema.required(\"floor must have a texture\"),\n    researchPrerequisites: yup.array().of(DefSchema.required()),\n    stuffCost: yup.number().integer().positive(),\n    stuffCategories: yup.array().required().of(DefSchema.required()),\n    costs: yup.array().of(CostSchema),\n    stats: yup.array().of(StatSchema),\n    affordances: yup.array().required().min(1).of(DefSchema.required()),\n    tags: yup.array().of(yup.string()),\n    burnedDef: DefSchema,\n    terrainAffordanceNeeded: DefSchema,\n});\n\nexport class Floor {\n    static floorCount = 0;\n\n    id: string;\n    @computed get defName(): string {\n        return sanitizeString(`StuffedFloor_${about.name}_${this.label}`);\n    }\n    @observable label: string = \"\";\n    @observable description: string = \"\";\n    @observable texture?: Texture;\n    @observable edgeType: EdgeType = \"Hard\";\n    @observable stuffCategories = observable.array<string>([]);\n    @observable stuffcost: number = 0;\n    @observable costs: defValue[] = [];\n    @observable stats: defValue[] = [];\n    @observable affordances = observable.array<string>([\n        \"Light\",\n        \"Medium\",\n        \"Heavy\",\n    ]);\n    @observable tags = observable.array<string>([\"Floor\"]);\n    @observable terrainAffordanceNeeded: Affordance = \"Heavy\";\n    @observable researchPrerequisites = observable.array<string>([]);\n    @observable burnedDef?: string;\n\n    @action resetFloor = (material: Material, type: Type) => {\n        this.costs = [];\n        this.affordances.replace([\"Light\", \"Medium\", \"Heavy\"]);\n        this.terrainAffordanceNeeded = \"Heavy\";\n        this.edgeType = \"Hard\";\n        this.stuffCategories.replace(simpleMode_stuffCategories[material]);\n        this.researchPrerequisites.replace(\n            simpleMode_researchPrerequisites[material][type]\n        );\n        this.burnedDef = simpleMode_burnedTerrain[material];\n        this.stats = simpleMode_stats[material][type];\n        this.stuffcost = simpleMode_stuffCost[type];\n        this.tags.replace(simpleMode_tags[type]);\n    };\n\n    @computed get validationErrors() {\n        return unwrapErrors<Floor>(this, FloorSchema);\n    }\n    constructor() {\n        this.id = `floor-${Floor.floorCount++}`;\n        this.resetFloor(\"Wood\", \"Pretty\");\n    }\n}\n\nexport interface TextureLoaderProps {\n    setTexture: (texture: Blob) => void;\n}\n\n@observer\nexport default class FloorComponent extends Component<FloorProps> {\n    constructor(props: FloorProps) {\n        super(props);\n        // this.fetchKitten();\n    }\n\n    async fetchKitten() {\n        try {\n            const result = await fetch(\n                `https://placekitten.com/${random(200, 500)}/${random(\n                    200,\n                    500\n                )}`\n            );\n            const blob = await result.blob();\n            this.props.floor.texture = new Texture(blob);\n        } catch (err) {\n            console.error(`Error fetching kitten`);\n        }\n    }\n\n    render() {\n        const floor = this.props.floor;\n        return (\n            <div className=\"floor\">\n                <div className=\"top columns\">\n                    <div className=\"basics column is-half\">\n                        <FloorBasics floor={floor}></FloorBasics>\n                        <FloorSettings floor={floor}></FloorSettings>\n                    </div>\n                    <div className=\"texture column is-half\">\n                        <TextureComponent floor={floor}></TextureComponent>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { action } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { Component } from \"react\";\r\nimport { DeleteX, FloorStore } from \"../StuffedFloorModGenerator\";\r\nimport { Floor } from \"./Floor\";\r\n\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n// bulma requires an 'a' element for tab tags,\r\n// which can't have a link.\r\n\r\ninterface TabManagerProps {\r\n    floors: FloorStore;\r\n    onTabChange: (tab: string) => void;\r\n    tab: string;\r\n}\r\n@observer\r\nexport default class TabManager extends Component<TabManagerProps> {\r\n    @action addFloor = () => {\r\n        const { floors, onTabChange } = this.props;\r\n        const floor = new Floor();\r\n        floors.addFloor(floor);\r\n        onTabChange(floor.id);\r\n    };\r\n\r\n    render() {\r\n        const { tab, floors, onTabChange } = this.props;\r\n\r\n        return (\r\n            <div className=\"tabs is-boxed\">\r\n                <ul>\r\n                    <li className={tab === \"about\" ? \"is-active\" : \"\"}>\r\n                        <a onClick={() => onTabChange(\"about\")}>About</a>\r\n                    </li>\r\n                    {floors.floors.map((floor) => (\r\n                        <li\r\n                            key={floor.id}\r\n                            className={tab === floor.id ? \"is-active\" : \"\"}\r\n                        >\r\n                            <a onClick={() => onTabChange(floor.id)}>\r\n                                {floor.label || floor.id}\r\n                                {tab === floor.id && (\r\n                                    <DeleteX\r\n                                        className=\"delete-x\"\r\n                                        onClick={() =>\r\n                                            floors.removeFloor(floor.id)\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            </a>\r\n                        </li>\r\n                    ))}\r\n                    <li className=\"create-floor-button\">\r\n                        <a onClick={this.addFloor}>+ Add Floor</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport DownloadButton from \"./components/DownloadButton\";\nimport { observer } from \"mobx-react\";\nimport AboutComponent, { About } from \"./components/About\";\nimport { action, autorun, IObservableValue, observable } from \"mobx\";\nimport FloorComponent, { Floor } from \"./components/Floor\";\nimport \"./styles/style.scss\";\nimport TabManager from \"./components/TabManager\";\n\nexport class FloorStore {\n    @observable floors = observable.array<Floor>([]);\n    @action addFloor(floor: Floor): void {\n        this.floors.push(floor);\n    }\n    @action removeFloor(id: string): void {\n        const floor = this.floors.find((f) => f.id === id);\n        console.log({ id, floor });\n        if (floor) this.floors.remove(floor);\n    }\n\n    constructor() {\n        this.floors.push(new Floor());\n        autorun(() =>\n            console.log(\n                `Added floor, we now have ${this.floors.length} floors...`\n            )\n        );\n    }\n}\n\n@observer\nexport class DeleteX extends Component<Partial<React.SVGProps<SVGSVGElement>>> {\n    render() {\n        return (\n            <>\n                <svg\n                    height=\"14\"\n                    width=\"14\"\n                    viewBox=\"0 0 20 20\"\n                    aria-hidden=\"true\"\n                    focusable=\"false\"\n                    {...this.props}\n                >\n                    <path d=\"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\"></path>\n                </svg>\n            </>\n        );\n    }\n}\n\nexport const about = new About();\nexport const floors = new FloorStore();\nexport const submitting = observable.box(false);\n\n@observer\nexport default class StuffedFloorModGenerator extends Component {\n    @observable about: About = about;\n    @observable floors: FloorStore = floors;\n    @observable tab: string = \"about\";\n    @observable submitting: IObservableValue<boolean> = submitting;\n\n    @action changeTab = (tab: string) => {\n        console.log({ tab });\n        this.tab = tab;\n    };\n\n    render() {\n        const floor = this.floors.floors.find((f) => f.id === this.tab);\n        return (\n            <div id=\"main\" className=\"container\">\n                <div className=\"box\">\n                    <TabManager\n                        floors={this.floors}\n                        tab={this.tab}\n                        onTabChange={this.changeTab}\n                    ></TabManager>\n                    {this.tab === \"about\" && (\n                        <AboutComponent about={this.about}></AboutComponent>\n                    )}\n                    {floor && <FloorComponent floor={floor}></FloorComponent>}\n                </div>\n\n                <DownloadButton\n                    about={this.about}\n                    floors={this.floors}\n                ></DownloadButton>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport StuffedFloorGenerator from \"./StuffedFloorModGenerator\";\n\nReactDOM.render(\n    // <React.StrictMode>\n    <StuffedFloorGenerator />,\n    // </React.StrictMode>\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}